type Query {
  me: Viewer!
}

type Mutation {
  register(input: NewUser!): Viewer!
  login(input: LoginInput!): Viewer!
  postMessage(input: NewMessage!): Message!
  postProfile(input: NewProfile!): Profile!
}

type Subscription {
    messageAdded(id: ID!): Message!
}

type Viewer {
  id: ID!
  username: String!
  token: String!
}

type Profile {
  id: ID!
  userId: String!
  firstName: String!
  lastName: String!
  age: Int!
}

type Message {
  id: ID!
  text: String!
  senderId: String!
  createdAt: Time!
}

input NewProfile {
  userId: String!
  firstName: String!
  lastName: String!
  age: Int!
}

input NewMessage {
  text: String!
  senderId: String!
  receiverId: String!
}

input NewUser {
  username: String!
  password: String!
}

input LoginInput {
  username: String!
  password: String!
}

scalar Time